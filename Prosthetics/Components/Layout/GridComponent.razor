@using Prosthetics.Components.Models.Grid
@using System.Diagnostics.CodeAnalysis

@typeparam TData

<RadzenDataGrid @ref="dataGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true"
                Data="@Data" TItem="TData" RowClick="OnRowClick">
    <Columns>
            @foreach(var column in ColumnsDefinition)
            {
                @if (column.IsCustomDisplay)
                {
                    <RadzenDataGridColumn TItem="TData" Title="@column.Title" Property="@column.Property" Visible="@(!column.Hide)">
                        <Template Context="order">
                            @column.DisplayAction(order)
                        </Template>
                    </RadzenDataGridColumn>
                }
                else
                {
                     <RadzenDataGridColumn TItem="TData" Title="@column.Title" Property="@column.Property" Visible="@(!column.Hide)"></RadzenDataGridColumn>
                }
            }
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public EventCallback<TData> OnRowClickEvent { get; set; }
    [Parameter, AllowNull]
    public IEnumerable<TData> Data { get; set; }
    [Parameter, AllowNull]
    public ColumnInfo<TData>[] ColumnsDefinition { get; set; }

    RadzenDataGrid<TData> dataGrid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    void OnRowClick(DataGridRowMouseEventArgs<TData> param) => this.OnRowClickEvent.InvokeAsync(param.Data);
}
