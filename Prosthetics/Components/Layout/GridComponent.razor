@using Prosthetics.Components.Layout.Abstractions
@using Prosthetics.Components.Models.Grid
@using System.Diagnostics.CodeAnalysis

@typeparam TData where TData : IGridData

<RadzenDataGrid @ref="_dataGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true" PageSize="5" AllowSorting="true" Data="@Data" TItem="TData" RowClick="OnRowClick"
                CellRender="RowRender">
    <Columns>
        @for (int i = 0; i < ColumnsDefinition.Length; i++)
        {
            var temp = ColumnsDefinition[i];

            <RadzenDataGridColumn TItem="TData" Title="@temp.Title" Property="@temp.Property" Visible="@(!temp.Hide)">
                <Template Context="context">
                    @if(temp.Template != null)
                    {
                        @temp.Template?.Invoke(context)
                    }
                    else
                    {
                        <a @onclick=@((args) => OnColClick(context, temp.Property))> @temp?.Display(context) </a>
                    }
                </Template>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public EventCallback<TData> OnRowClickEvent { get; set; }
    [Parameter]
    public EventCallback<ColEvent<TData>> OnColClickEvent { get; set; }
    [Parameter, AllowNull]
    public IEnumerable<TData> Data { get; set; }
    [Parameter, AllowNull]
    public ColumnInfo<TData>[] ColumnsDefinition { get; set; }

    private RadzenDataGrid<TData> _dataGrid;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await dataGrid.RefreshDataAsync();
    // }
    public async Task RefreshDataAsync() => await _dataGrid.RefreshDataAsync();

    void RowRender(RowRenderEventArgs<TData> args)
    {
        if (args.Data.ClassRow != null)
        {
            //args.Attributes.Add("class", args.Data.ClassRow);
            args.Attributes.Add("style", args.Data.ClassRow);
        }
    }
    void OnRowClick(DataGridRowMouseEventArgs<TData> param) => this.OnRowClickEvent.InvokeAsync(param.Data);
    void OnColClick(TData param, string propertyName) => this.OnColClickEvent.InvokeAsync(new ColEvent<TData>(param, propertyName));
}
