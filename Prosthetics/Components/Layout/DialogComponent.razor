@using Prosthetics.Components.Models.Dialog
@inject DialogService _dialogService

@typeparam TComponent where TComponent : ComponentBase

@code {
    [Inject]
    [Parameter]
    public DialogService Service { get; set; }
    [Parameter]
    public EventCallback<bool> OnCloseEvent { get; set; } = new EventCallback<bool>();

    [Parameter]
    public DialogConfig Config { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _dialogService.OnClose += DialogCloseEventHandler();
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // if (Config.ShowDialog)
        // {
        //     if (Config.ViewParameters != null)
        //         Config.ViewParameters.TryAdd(nameof(OnCloseEvent), OnCloseEvent);
            
        //     var result = await _dialogService.OpenAsync<TComponent>(Config.Title, Config.ViewParameters);
        // }
    }

    public Action<dynamic> DialogCloseEventHandler() => (dynamic param) => { OnCloseEvent.InvokeAsync(false); };
}
