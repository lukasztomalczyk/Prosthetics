@using MediatR
@using Prosthetics.Components.Layout
@using Prosthetics.Features
@using Prosthetics.Features.Orders

@inject IMediator _mediator
@inject IStore _store;

<h3>Dodatkowe zadania:</h3>
<ul class="list-group">
    @foreach (var item in AdditionalWorks)
    {
        <li class="list-group-item">@item</li>
    }
</ul>
<br />
<h3>Komentarz:</h3>
<RadzenTextArea @bind-Value=@Comments TValue="string" Disabled="_disableTextArea" Rows="3" Cols="70" />
<br />
<ButtonComponent Text="@_buttonText" OnButtonClick="@OnButtonClick"></ButtonComponent>

@code {
    [Parameter]
    public IEnumerable<string> AdditionalWorks { get; set; }
    [Parameter]
    public string Comments { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<bool> OnCloseEvent { get; set; } = new EventCallback<bool>();

    private bool _disableTextArea = true;
    private string _buttonText = "Edytuj";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task OnButtonClick() 
    {
        if (_buttonText == "Edytuj")
        {
            _buttonText = "Zapisz zmiany";
            _disableTextArea = false;
        } 
        else
        {
            await _mediator.Send(new EditOrderCommand() 
            { 
                Comments = this.Comments,
                OrderId = _store.Order.OrderId
            });
            await OnCloseEvent.InvokeAsync(false);
        }
    }
}
