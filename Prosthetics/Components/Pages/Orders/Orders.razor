@page "/orders"

@using MediatR
@using Prosthetics.Components.Enums
@using Prosthetics.Components.Layout
@using Prosthetics.Components.Models.Grid
@using Prosthetics.Features
@using Prosthetics.Features.Orders
@using Prosthetics.Persistance
@using Prosthetics.Persistance.Entities

@inject NavigationManager _navManager
@inject IMediator _mediator;
@inject IStore _store;

<h3>Zlecenia dla lekarza: @_store.Order.DoctorFullName</h3>

<GridComponent TData="OrderDto" ColumnsDefinition="@_columns" Data="@_orders" OnRowClickEvent="@(e => OnOrderClick(e))"></GridComponent>

<ButtonComponent Text="Dodaj zlecenie" Type="TypeOfButton.PRIMARY" Style="StyleOfButton.CIRCLE" OnButtonClick="OnAddButtonClicked"></ButtonComponent>

@code {
    [Parameter]
    public string DoctorId { get; set; }

    private IEnumerable<OrderDto>? _orders;
    private ColumnInfo[] _columns = new ColumnInfo[]
    {
        new ColumnInfo() { Title = "Typ zamówienia", Property = "Type" },
        new ColumnInfo() { Title = "Data zlecenia", Property = "OrderDate" },
        new ColumnInfo() { Title = "Data końcowa", Property = "DeadLine" },
        new ColumnInfo() { Title = "Status", Property = "Status" }
    };

    protected override async Task OnInitializedAsync()
    {
        _orders = await _mediator.Send(new GetOrdersQuery() { DoctorId = _store.Order.DoctorId });
    }

    protected void OnOrderClick(OrderDto order)
    {

    }

    protected void OnAddButtonClicked() => _navManager.NavigateTo("/add-order");

    private string GetStatus(int status)
    {
        switch (status)
        {
            case 1:
                return "nowe";
            case 2:
                return "w przygotowaniu";
            case 3:
                return "wycofane";
            default:
                return "nowe";
        }
    }
}
