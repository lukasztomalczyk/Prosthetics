@page "/orders"

@using Mapster
@using MediatR
@using Prosthetics.Common
@using Prosthetics.Components.Enums
@using Prosthetics.Components.Layout
@using Prosthetics.Components.Models.Dialog
@using Prosthetics.Components.Models.Grid
@using Prosthetics.Components.Pages.Orders.Models
@using Prosthetics.Components.Pages.Orders.Views
@using Prosthetics.Features
@using Prosthetics.Features.AdditionalWorks
@using Prosthetics.Features.Orders
@using Prosthetics.Persistance
@using Prosthetics.Persistance.Entities

@inject NavigationManager _navManager
@inject IMediator _mediator;
@inject IStore _store;
@inject IDialogService _dialogService
@inject DialogService _radzenDialogService

<h3>Zlecenia dla lekarza: @_store.Order.DoctorFullName</h3>

<GridComponent @ref="_orderGrid" TData="OrderViewDto" ColumnsDefinition="@_columns" Data="@_orders"
    OnRowClickEvent="@(e => OnRowClick(e))" OnColClickEvent="@(e => OnColClick(e))"></GridComponent>
<br />
<ButtonComponent Text="Dodaj zlecenie" Type="TypeOfButton.PRIMARY" Style="StyleOfButton.CIRCLE" OnButtonClick="OnAddButtonClicked"></ButtonComponent>

<DialogComponent TComponent="Comment" TReturn="string" OnCloseEvent="OnDialogClose" Setup="_commentDialog"></DialogComponent>
<DialogComponent TComponent="AdditionalWorksComponent" TReturn="List<AdditionalWorkCountDto>" OnCloseEvent="OnAdditionalWorksDialogClose" Setup="_additionalWorksDialog"></DialogComponent>

@code {
    [Parameter]
    public required string DoctorId { get; set; }

    private IEnumerable<OrderViewDto>? _orders;
    private ColumnInfo<OrderViewDto>[] _columns = new OrderGridConfig().Data;

    private DialogConfig _commentDialog = new DialogConfig("Komentarz");
    private DialogConfig _additionalWorksDialog = new DialogConfig("Dodatkowe zlecenia");

    private GridComponent<OrderViewDto> _orderGrid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // TODO Wywołuje się za każdym razem po wejściu na stronę
        // Inny lifehook
        _dialogService.Setup(_radzenDialogService);
        await LoadDataAsync();
    }

    private void OnRowClick(OrderViewDto order)
    {

    }

    private async Task OnColClick(ColEvent<OrderViewDto> context)
    {
        if (context.ColumnName == nameof(context.Data.ShortComment))
            await ShowCommentDialog(context.Data);
        else
            await ShowAdditionalWorksDialog(context.Data);
    }

    private async Task ShowAdditionalWorksDialog(OrderViewDto order)
    {
        //_additionalWorksDialog.ClearViewParameters();
        _additionalWorksDialog.AddViewParameter(nameof(AdditionalWorksComponent.AdditionalWorksCounts), order.AdditionalWorksCounts);
        _additionalWorksDialog.AddViewParameter(nameof(AdditionalWorksComponent.OrderId), order.Id);

        await _dialogService.OpenAsync<AdditionalWorksComponent>(_additionalWorksDialog);
    }

    private async Task LoadDataAsync()
    {
        var result = await _mediator.Send(new GetOrdersQuery() { DoctorId = _store.Order.DoctorId });
        _orders = TransformData(result.ToList());
    }

    private async Task ShowCommentDialog(OrderViewDto order)
    {
        _store.Order.OrderId = order.Id;
        //_commentDialog.ClearViewParameters();
        _commentDialog.AddViewParameter(nameof(order.Comments), order.Comments);

        await _dialogService.OpenAsync<Comment>(_commentDialog);
    }

    private async Task OnDialogClose(dynamic value)
    {
        // TODO lista odświeża się nawet jeśli nie zostały zmiany wprowadzone
        await LoadDataAsync();
        await _orderGrid.RefreshDataAsync();
        _dialogService.Close();
    }

    private async Task OnAdditionalWorksDialogClose(List<AdditionalWorkCountDto> additionalWorks)
    {
        await _mediator.Send(new UpdateAdditionalWorksCommand()
        {
            OrderId = _store.Order.OrderId,
            AdditionalCountWorks = additionalWorks.Adapt<IEnumerable<EditedAdditionalCountWorkDto>>()
        });
        await LoadDataAsync();
        await _orderGrid.RefreshDataAsync();
    }

    private void OnAddButtonClicked() => _navManager.NavigateTo("/add-patient");

    private IEnumerable<OrderViewDto> TransformData(List<OrderDto> list)
    {
        list.ForEach(_ =>
        {
            _.AdditionalWorksCount = _.AdditionalWorksCounts.Count();
            if (_.Comments?.Length > 10)
                _.ShortComment = _.Comments.Substring(0, 10);
            else
                _.ShortComment = string.IsNullOrEmpty(_.Comments) ? "..." : _.Comments;
        });

        var mappedOrders = list.Select(_ => new OrderViewDto()
        {
            Id = _.Id,
            PatientFullName = _.PatientFullName,
            OrderDate = _.OrderDate,
            DeadLine = _.DeadLine,
            Type = _.Type,
            Status = _.Status,
            AdditionalWorksCounts = _.AdditionalWorksCounts,
            AdditionalWorksCount = _.AdditionalWorksCount,
            Comments = _.Comments,
            ShortComment = _.ShortComment,
            OrderStatusId = _.OrderStatusId
        })
        .ToList();

        mappedOrders.ForEach(_ => _.Actions = RenderHelper.Generate<OrderActionButttonsComponent<OrderViewDto>, OrderViewDto>(
                    new RenderComponentData(nameof(OrderActionButttonsComponent<OrderViewDto>.Data), _),
                    new RenderComponentData(nameof(OrderActionButttonsComponent<OrderViewDto>.OrderId), _.Id),
                    new RenderComponentData(nameof(OrderActionButttonsComponent<OrderViewDto>.OrderStatusId), _.OrderStatusId)));

        return mappedOrders;
    }

    private RenderFragment GenerateActionButtonsView(OrderDto order) => builder =>
    {
        var type = typeof(OrderActionButttonsComponent<>).MakeGenericType(new[] { typeof(OrderDto) });
        builder.OpenComponent(1, type);
        builder.AddAttribute(2, "Data", order);
        builder.AddAttribute(3, "OrderStatusId", order.OrderStatusId);
        builder.AddAttribute(4, "OrderId", order.Id);
        builder.CloseComponent();
    };
}
