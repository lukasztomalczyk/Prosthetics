@page "/orders"

@using MediatR
@using Prosthetics.Common
@using Prosthetics.Components.Enums
@using Prosthetics.Components.Layout
@using Prosthetics.Components.Models.Dialog
@using Prosthetics.Components.Models.Grid
@using Prosthetics.Components.Pages.Orders.Views
@using Prosthetics.Features
@using Prosthetics.Features.Orders
@using Prosthetics.Persistance
@using Prosthetics.Persistance.Entities

@inject NavigationManager _navManager
@inject IMediator _mediator;
@inject IStore _store;
@inject IDialogService _dialogService
@inject DialogService _radzenDialogService

<h3>Zlecenia dla lekarza: @_store.Order.DoctorFullName</h3>

<GridComponent TData="OrderDto" ColumnsDefinition="@_columns" Data="@_orders" 
    OnRowClickEvent="@(e => OnRowClick(e))" OnColClickEvent="@(e => OnColClick(e))"></GridComponent>
<br />
<ButtonComponent Text="Dodaj zlecenie" Type="TypeOfButton.PRIMARY" Style="StyleOfButton.CIRCLE" OnButtonClick="OnAddButtonClicked"></ButtonComponent>

<DialogComponent TComponent="Comment" Config="@_commentDialog"></DialogComponent>

<DialogComponent TComponent="ChangeStatusComponent" Config="@_statusdialog"></DialogComponent>

@code {
    [Parameter]
    public string DoctorId { get; set; }

    private IEnumerable<OrderDto>? _orders;
    private ColumnInfo<OrderDto>[] _columns = new OrderGridConfig().Data;

    private DialogConfig _commentDialog = new DialogConfig("Komentarz");
    private DialogConfig _statusdialog = new DialogConfig("Zmień status");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // TODO Wywołuje się za każdym razem po wejściu na stronę
        // Inny lifehook
        _dialogService.Setup(_radzenDialogService);
        await LoadDataAsync();
    }

    private void OnRowClick(OrderDto order)
    {

    }

    private async Task OnColClick(ColEvent<OrderDto> context)
    {
        if (context.ColumnName == "Status")
            await ShowChangeStatusDialog(context.Data);
        else
            await ShowCommentDialog(context.Data);
    }

    private async Task ShowChangeStatusDialog(OrderDto order)
    {
        _store.Order.OrderId = order.Id;
        _statusdialog.Show();

        await _dialogService.OpenAsync<ChangeStatusComponent>(typeof(ChangeStatusComponent), _statusdialog);
    }

    private async Task LoadDataAsync()
    {
        var result = await _mediator.Send(new GetOrdersQuery() { DoctorId = _store.Order.DoctorId });
        _orders = TransformData(result.ToList());
    }

    private async Task ShowCommentDialog(OrderDto order)
    {
        _store.Order.OrderId = order.Id;
        _commentDialog.ClearViewParameters();
        _commentDialog.AddViewParameter(nameof(order.AdditionalWorks), order.AdditionalWorks.Select(_ => _.Name));
        _commentDialog.AddViewParameter(nameof(order.Comments), order.Comments);
        _commentDialog.Show();

        await _dialogService.OpenAsync<Comment>(typeof(Comment), _commentDialog);
    }

    private async Task OnCommnetDialogClose(bool show)
    {
        //_commentDialog.Hide();
        await LoadDataAsync();
    }

    private void OnStatusDialogClose(bool show)
    {
        //_statusdialog.Hide();
        //_navManager.NavigateTo("/orders", true);
    }

    private void OnAddButtonClicked() => _navManager.NavigateTo("/add-patient");

    private IEnumerable<OrderDto> TransformData(List<OrderDto> list)
    {
        list.ForEach(_ =>
        {
            _.AdditionalWorksCount = _.AdditionalWorks.Count();
            if (_.Comments?.Length > 10)
                _.ShortComment = _.Comments.Substring(0, 10);
            else
                _.ShortComment = _.Comments;
        });

        return list;
    }

    private string GetStatus(int status)
    {
        switch (status)
        {
            case 1:
                return "nowe";
            case 2:
                return "w przygotowaniu";
            case 3:
                return "wycofane";
            default:
                return "nowe";
        }
    }
}
