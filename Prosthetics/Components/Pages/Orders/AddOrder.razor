@page "/add-order";

@using MediatR
@using Prosthetics.Common
@using Prosthetics.Components.Enums
@using Prosthetics.Components.Layout
@using Prosthetics.Components.Models.Dialog
@using Prosthetics.Components.Pages.Orders.Models
@using Prosthetics.Features
@using Prosthetics.Features.AdditionalWorks
@using Prosthetics.Features.Orders
@using Prosthetics.Features.Patients

@inject NavigationManager _navManager
@inject IMediator _mediator;
@inject IDateTime _dateTime;
@inject IStore _store;
@inject IDialogService _dialogService
@inject DialogService _radzenDialogService
@inject INotificationService _notificationSerivce

<h3>Dodaj zamówienie dla pacjenta: @_store.Patient.LastName @_store.Patient.FirstName</h3>

<RadzenLabel Text="Typ:" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
<RadzenDropDown @bind-Value=@_orderTypeId Data=@_orderTypes ValueProperty="Id" TextProperty="Name" Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
<br />
<RadzenLabel Text="Data końcowa" Component="DatePickerHourFormat" Style="margin-right: 8px; vertical-align: middle;" />
<RadzenDatePicker @bind-Value=@_store.Order.DeadLine ShowTime="false" DateFormat="dd-MM-yyyy" Name="DatePickerHourFormat" />
<br />
<br />
<ButtonComponent Text="Anuluj" OnButtonClick="OnCancelClick"></ButtonComponent>
<ButtonComponent Text="Dalej" OnButtonClick="OnNextClick" Type="TypeOfButton.SUCCESS"></ButtonComponent>
<br />

<DialogComponent TComponent="AdditionalWorksComponent" TReturn="List<AdditionalWorkCountDto>" OnCloseEvent="OnDialogClose" Setup="_additionalWorksDialog"></DialogComponent>

@code {
    private int _orderTypeId = 1;
    private IEnumerable<OrderTypeDto>? _orderTypes;

    private DialogConfig _additionalWorksDialog = new DialogConfig("Dodatkowe zlecenia");

    protected override async Task OnInitializedAsync()
    {
        _store.Order.DeadLine = _dateTime.Now();
        _dialogService.Setup(_radzenDialogService);
        _orderTypes = await _mediator.Send(new GetOrderTypesQuery());

        await base.OnInitializedAsync();
    }

    protected async Task OnNextClick()
    {
        await _dialogService.OpenAsync<AdditionalWorksComponent>(_additionalWorksDialog);
    }

    protected async Task OnDialogClose(List<AdditionalWorkCountDto> additionalWorks)
    {

        var patientId = await _mediator.Send(new AddPatientCommand()
        {
            FirstName = _store.Patient.FirstName,
            LastName = _store.Patient.LastName
        });

        await _mediator.Send(new AddOrderCommand()
        {
            PatientId = patientId,
            DeadLine = _store.Order.DeadLine,
            DoctorId = _store.Order.DoctorId,
            OrderTypeId = _orderTypeId,
            AdditionalWorks = additionalWorks
        });
        OnCancelClick();
        Thread.Sleep(1000);
        _notificationSerivce.Success("Dodano poprawnie zlecenie");
    }

    protected void OnCancelClick() => _navManager.NavigateTo("/orders");
}
