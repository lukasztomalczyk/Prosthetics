@page "/add-order";

@using MediatR
@using Prosthetics.Common
@using Prosthetics.Components.Layout
@using Prosthetics.Features
@using Prosthetics.Features.Orders

@inject NavigationManager _navManager
@inject IMediator _mediator;
@inject IDateTime _dateTime;
@inject IStore _store;

<h3>Dodaj zamówienie</h3>

<RadzenLabel Text="Wybierz..." Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
<RadzenDropDown @bind-Value=@_selectedType Data=@_types Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
<br />
<RadzenLabel Text="Wybierz datę końcową" Component="DatePickerHourFormat" Style="margin-right: 8px; vertical-align: middle;" />
<RadzenDatePicker @bind-Value=@_selectedDeadLine ShowTime="false" DateFormat="dd-MM-yyyy" Name="DatePickerHourFormat" />
<br />
<ButtonComponent Text="Dodaj" OnButtonClick="AddOrderAsync"></ButtonComponent>

@code {
    private string _selectedType;
    private DateTime _selectedDeadLine;
    private IEnumerable<string> _types = new string[]
    {
        "MD", "Type 1", "Type 2", "Type 3"    
    };
        
    protected DateTime GetTimeNow() => _dateTime.Now();

    protected override async Task OnInitializedAsync()
    {
        _selectedDeadLine = _dateTime.Now();

        await base.OnInitializedAsync();
    }

    protected async Task AddOrderAsync()
    {
        await _mediator.Send(new AddOrderCommand()
        {
            DeadLine = _selectedDeadLine,
            DoctorId = _store.Order.DoctorId,
                Type = _selectedType
        });

        Thread.Sleep(100);

        _navManager.NavigateTo($"/orders");
    }
}
