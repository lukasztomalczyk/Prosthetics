@page "/export-excel"

@using System.Text
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Storage
@using MediatR
@using Prosthetics.Common
@using Prosthetics.Components.Layout
@using Prosthetics.Features.AdditionalWorks
@using Prosthetics.Features.Admin
@using Prosthetics.Features.Orders

@inject IFileSaver _fileServer
@inject IExcelExporter _excelExporter
@inject IMediator _mediator
@inject IDateTime _dateTime
@inject NotificationService _notificationService

<RadzenLabel Text="Wybierz zakres generowane raportu:" Component="DatePickerHourFormat" Style="margin-right: 8px; vertical-align: middle;" />
od:
<RadzenDatePicker @bind-Value=@_from ShowTime="false" DateFormat="dd-MM-yyyy" Name="DatePickerHourFormat" />
do:
<RadzenDatePicker @bind-Value=@_to ShowTime="false" DateFormat="dd-MM-yyyy" Name="DatePickerHourFormat" />
<br />
<ButtonComponent Text="Pobierz raport" OnButtonClick="@GenerateReport"></ButtonComponent>

@code {
    private DateTime _from { get; set; }

    private DateTime _to { get; set; }

    protected override void OnInitialized()
    {
        var today = _dateTime.Now();
        _to = new DateTime(today.Year, today.Month, DateTime.DaysInMonth(today.Year, today.Month));
        _from = new DateTime(today.Year, today.Month, 1);
    }

    protected async Task GenerateReport()
    {
        var result = await _mediator.Send(new GetDoctorsOrdersByPatientQuery()
        {
            From = _from,
            To = _to
        });
        var headers = await GetHeadersNamesAsync();
        _excelExporter.New();

        foreach (var doctorOrders in result)
        {
            _excelExporter.AddWorksheet(doctorOrders.DoctorFullName);
            _excelExporter.SetDataForWorksheet(doctorOrders.DoctorFullName, excel =>
            {
                new ExcelDefinition(excel, doctorOrders.OrdersByPatients, headers).AddHeaders().AddRows();
            });
        }

        await SaveFile();
    }

    private async Task<IEnumerable<string>> GetHeadersNamesAsync()
    {
        var orderTypes = await _mediator.Send(new GetOrderTypesQuery());
        var additionalWorks = await _mediator.Send(new GetAdditionalWorksQuery());

        var headers = orderTypes.Select(_ => _.Name).ToList();
        headers.AddRange(additionalWorks.Select(_ => _.Name));

        return headers;
    }

    protected async Task SaveFile()
    {
        using var stream = new MemoryStream();
        _excelExporter.SaveFile(stream);
        var fileSaverResult = await _fileServer.SaveAsync(
            $"Raport_{_from.ToString("dd-MM-yyyy")}-{_to.ToString("dd-MM-yyyy")}.xlsx", stream);
        fileSaverResult.EnsureSuccess();

        _notificationService.Notify(new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
                Summary = $"Plik zapisano: {fileSaverResult.FilePath}",
            Duration = 4000
        });
    }
}
