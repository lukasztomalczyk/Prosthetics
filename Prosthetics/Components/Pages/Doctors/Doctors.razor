@page "/doctors"

@using JuniorDevOps.Net.Http
@using Prosthetics.Common
@using Prosthetics.Components.Enums
@using Prosthetics.Components.Layout
@using Prosthetics.Components.Models.Grid
@using Prosthetics.Components.Pages.Doctors.DoctorsViews
@using Prosthetics.Components.Pages.Doctors.Models
@using Prosthetics.Features
@using Prosthetics.ApiModels
@using Prosthetics.Api.Queries.Doctors

@inject NavigationManager _navManager
@inject IStore _store;
@inject IHttpRequest _httpRequest

<h3>Wybierz lekarza</h3>

<GridComponent TData="DoctorViewDto" ColumnsDefinition="@_columns" Data="@_doctors" OnColClickEvent="@(e => OnDoctorClick(e))"></GridComponent>
<br />

<ButtonComponent Text="Dodaj lekarza" Type="TypeOfButton.PRIMARY" Style="StyleOfButton.CIRCLE" OnButtonClick="OnAddButtonClicked"></ButtonComponent>

@code {
    private IEnumerable<DoctorViewDto>? _doctors;
    private ColumnInfo<DoctorViewDto>[] _columns = new DoctorsGridConfig().Data;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _httpRequest.Send(new GetDoctorsQuery());
            _doctors = TransformDoctors(response);

            await base.OnInitializedAsync();

        }
        catch (Exception ex)
        {
            Console.Write(ex.Message);
            throw;
        }
    }

    private void OnDoctorClick(ColEvent<DoctorViewDto> context)
    {
        _store.Order.DoctorId = context.Data.Id;
        _store.Order.DoctorFullName = context.Data.FullName;

        _navManager.NavigateTo($"/orders");
    }

    private IEnumerable<DoctorViewDto> TransformDoctors(IEnumerable<DoctorDto> list)
    {
        return list.Select(_ => new DoctorViewDto()
        {
            Id = _.Id,
            FullName = _.FullName,
            Actions = RenderHelper.Generate<DoctorActionButtonsComponent>(
                new RenderComponentData("DoctorId", _.Id))
        });
    }

    private void OnAddButtonClicked() => _navManager.NavigateTo("/add-doctor");
}
