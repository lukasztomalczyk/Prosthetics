@page "/doctors"

@using MediatR
@using Microsoft.EntityFrameworkCore
@using Prosthetics.Components.Enums
@using Prosthetics.Components.Layout
@using Prosthetics.Components.Models.Grid
@using Prosthetics.Features
@using Prosthetics.Features.Doctors
@using Prosthetics.Persistance
@using Prosthetics.Persistance.Entities

@inject NavigationManager _navManager
@inject IMediator _mediator;
@inject IStore _store;

<h3>Wybierz lekarza</h3>

<GridComponent TData="DoctorDto" ColumnsDefinition="@_columns" Data="@_doctors" OnRowClickEvent="@(e => OnDoctorClick(e))"></GridComponent>
<br />

<ButtonComponent Text="Dodaj lekarza" Type="TypeOfButton.PRIMARY" Style="StyleOfButton.CIRCLE" OnButtonClick="OnAddButtonClicked"></ButtonComponent>

@code {
    private IEnumerable<DoctorDto>? _doctors;
    private ColumnInfo<DoctorDto>[] _columns = new ColumnInfo<DoctorDto>[]
    {
        new ColumnInfo<DoctorDto> { Title = "Imię i nazwisko", Property = "FullName", Display = _ => _.FullName }
    };

    protected override async Task OnInitializedAsync()
    {
        _doctors = await _mediator.Send(new GetDoctorsQuery());

        await base.OnInitializedAsync();
    }

    private void OnDoctorClick(DoctorDto doctor)
    {
        _store.Order.DoctorId = doctor.Id;
        _store.Order.DoctorFullName = doctor.FullName;

        _navManager.NavigateTo($"/orders");
    }

    private void OnAddButtonClicked() => _navManager.NavigateTo("/add-doctor");
}
